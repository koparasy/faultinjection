#include "fi/faultq.hh"
#include "fi/reg_injfault.hh"
#include "fi/fi_system.hh"


#include "sim/full_system.hh"

#ifdef ALPHA_ISA
#include "arch/alpha/utility.hh"
#endif
using namespace std;


RegisterInjectedFault::RegisterInjectedFault(ifstream &os)
	: CPUInjectedFault(os)
{
	setFaultType(InjectedFault::RegisterInjectedFault);
	std::string v;
	int k;
	os>>v;
	setRegType(v);
	os>>k;
	setRegister(k);
	fi_system->mainInjectedFaultQueue.insert(this);
}

RegisterInjectedFault::~RegisterInjectedFault()
{
}


const char *
RegisterInjectedFault::description() const
{
    return "RegisterInjectedFault";
}



void RegisterInjectedFault::dump() const
{
  if (DTRACE(FaultInjection)) {
    std::cout << "===RegisterInjectedFault::dump()===\n";
    CPUInjectedFault::dump();
    std::cout << "\tregister: " << getRegister() << "\n";
    std::cout << "\tregType: " << getRegType() << "\n";
    std::cout << "~==RegisterInjectedFault::dump()===\n";
  }
}




int
RegisterInjectedFault::process()
{
  DPRINTF(FaultInjection, "===RegisterInjectedFault::process() ID: %d ===\n", getFaultID());
  dump();
  switch (getRegType())
    {
    case(RegisterInjectedFault::IntegerRegisterFault):
      {
	TheISA::IntReg regval = getCPU()->getContext(getTContext())->readIntReg(getRegister());
	TheISA::IntReg mask = manifest(regval, getValue(), getValueType());
	getCPU()->getContext(getTContext())->setIntReg(getRegister(), mask);
	break;
      }
    case(RegisterInjectedFault::FloatRegisterFault):
      {
	TheISA::FloatReg regval = getCPU()->getContext(getTContext())->readFloatReg(getRegister());
	TheISA::FloatReg mask = manifest(regval, getValue(), getValueType());
	getCPU()->getContext(getTContext())->setFloatReg(getRegister(), mask);
	break;
      }
    case(RegisterInjectedFault::MiscRegisterFault):
      {
	TheISA::MiscReg regval = getCPU()->getContext(getTContext())->readMiscReg(getRegister());
	TheISA::MiscReg mask = manifest(regval, getValue(), getValueType());
	getCPU()->getContext(getTContext())->setMiscReg(getRegister(), mask);
	break;
      }
    default:
      {
	std::cout << "RegisterInjectedFault::process() -- Default case getRegType() Error\n";
	assert(0);
	break;
      }
    }
  

  check4reschedule();

  DPRINTF(FaultInjection, "~==RegisterInjectedFault::process() ID: %d ===\n", getFaultID());

  return 0;
}


void
RegisterInjectedFault::check4reschedule()
{

  if (!isManifested()) {
    setManifested(true);
  }
   
  if (getOccurrence() != 1) {
    Tick cycles = getTiming() + getCPU()->ticks(1);
    int insts = getTiming() + getTiming()/2;
    Addr addr = getTiming() + (getCPU()->getContext(getTContext())->pcState().nextInstAddr() - getCPU()->getContext(getTContext())->pcState().instAddr());
    increaseTiming(cycles, insts, addr);
    
    schedule(false);
  }

  if ((getOccurrence() == 1)) {
    getQueue()->remove(this);
  }

  if (getOccurrence() > 1) {
    decreaseOccurrence();
  }

}
